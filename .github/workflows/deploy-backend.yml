name: deploy-backend

on:
  push:
    branches: [ main ]

concurrency:
  group: deploy-backend
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.19.4'

      # Stage exactly what becomes /site/wwwroot
      - name: Stage artifacts (server.js + express-ingest)
        run: |
          set -euo pipefail
          rm -rf artifacts
          mkdir -p artifacts

          # 1) Entry point: node server.js at wwwroot root
          if [ -f backend/server.js ]; then
            cp backend/server.js artifacts/server.js
          elif [ -f server.js ]; then
            cp server.js artifacts/server.js
          else
            echo "ERROR: server.js not found in backend/ or repo root"; exit 1
          fi

          # 2) Root package.json with forced start; strip any postinstall
          if [ -f backend/package.json ]; then
            jq '(.scripts//={}) | .scripts.start="node server.js" | del(.scripts.postinstall)' backend/package.json > artifacts/package.json
            [ -f backend/package-lock.json ] && cp backend/package-lock.json artifacts/package-lock.json || true
          elif [ -f package.json ]; then
            jq '(.scripts//={}) | .scripts.start="node server.js" | del(.scripts.postinstall)' package.json > artifacts/package.json
            [ -f package-lock.json ] && cp package-lock.json artifacts/package-lock.json || true
          else
            echo '{"name":"ingest","version":"1.0.0","scripts":{"start":"node server.js"},"dependencies":{"express":"^4.19.2"}}' > artifacts/package.json
          fi

          # 3) Locate real express-ingest (must have helper + src or dist)
          CANDIDATES=(
            backend/express-ingest
            CanadWill_Phase2/express-ingest
            express-ingest
          )
          EXPRESS_SRC=""
          for d in "${CANDIDATES[@]}"; do
            if [ -d "$d" ] && [ -f "$d/serp-tools.runtime.js" ] && { [ -d "$d/src/providers" ] || [ -d "$d/dist/providers" ]; }; then
              EXPRESS_SRC="$d"; break
            fi
          done
          if [ -z "$EXPRESS_SRC" ]; then
            echo "ERROR: express-ingest with helper + (src|dist) not found"; exit 1
          fi

          # 4) Copy full express-ingest tree
          mkdir -p artifacts/express-ingest
          cp -a "$EXPRESS_SRC"/. artifacts/express-ingest/

          echo "===== STAGED TREE (first 3 levels) ====="
          find artifacts -maxdepth 3 -print

      - name: Install root deps
        run: |
          set -e
          cd artifacts
          npm install --omit=dev --no-audit --no-fund

      - name: Install & build express-ingest (produce dist/)
        run: |
          set -e
          cd artifacts/express-ingest
          # 1) install runtime deps (if any)
          npm install --omit=dev --no-audit --no-fund || true
          # 2) ensure local TS toolchain (no global npx)
          npm install --no-save typescript@5 @types/node @types/express
          # 3) compile ONLY if tsconfig exists; use local tsc path explicitly
          if [ -f tsconfig.json ]; then
            node ./node_modules/typescript/bin/tsc -v
            node ./node_modules/typescript/bin/tsc -p tsconfig.json
          fi
          # HARD REQUIREMENTS for this deploy:
          test -f serp-tools.runtime.js || { echo "ERROR: missing express-ingest/serp-tools.runtime.js"; exit 1; }
          test -f dist/providers/serphouseClient.js || { echo "ERROR: missing dist/providers/serphouseClient.js after build"; ls -la dist || true; exit 1; }
          cd -

      - name: Create deploy.zip (exclude Procfile to avoid overrides)
        run: |
          set -e
          cd artifacts
          zip -r ../deploy.zip . -x "**/.git/**" "**/.cache/**" "**/node_modules/.cache/**" "Procfile"
          cd -

      - name: Deploy to Azure WebApp (ingest)
        uses: azure/webapps-deploy@v3
        with:
          app-name: canadawill-ingest
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: deploy.zip