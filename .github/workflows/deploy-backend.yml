name: deploy-backend

on:
  push:
    branches: [ main ]              # auto deploy on push to main

concurrency:
  group: deploy-backend
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20.19.4'

      # Stage exactly what will become /home/site/wwwroot/*
      - name: Stage backend into flat artifacts root
        run: |
          set -e
          rm -rf artifacts
          mkdir -p artifacts

          # Root entrypoint expected by Azure/Oryx -> node server.js (known-good) 
          # (so /home/site/wwwroot/server.js exists) 
          cp backend/server.js artifacts/server.js

          # Create package.json at artifacts root:
          # - Force "start": "node server.js"
          # - Strip any "postinstall" that runs npm ci
          if [ -f backend/package.json ]; then
            jq '(.scripts//={}) 
                | .scripts.start="node server.js" 
                | del(.scripts.postinstall)' \
              backend/package.json > artifacts/package.json
          else
            echo '{"name":"ingest","version":"1.0.0","scripts":{"start":"node server.js"},"dependencies":{"express":"^4.19.2"}}' > artifacts/package.json
          fi
          # Lock file is optional; we will use npm install (not ci)
          [ -f backend/package-lock.json ] && cp backend/package-lock.json artifacts/package-lock.json || true

          # Copy express-ingest (no rsync; guaranteed on GH runners)
          if [ -d backend/express-ingest ]; then
            mkdir -p artifacts/express-ingest
            cp -a backend/express-ingest/. artifacts/express-ingest/
          fi

          echo "===== STAGED TREE ====="
          find artifacts -maxdepth 3 -type d -print
          echo "===== ROOT LIST ====="
          ls -la artifacts
          echo "===== EXPRESS-INGEST LIST ====="
          ls -la artifacts/express-ingest || true

      - name: Install root deps
        run: |
          set -e
          cd artifacts
          npm install --omit=dev --no-audit --no-fund

      - name: Install & build express-ingest deps
        run: |
          set -e
          if [ -f artifacts/express-ingest/package.json ]; then
            cd artifacts/express-ingest
            npm install --omit=dev --no-audit --no-fund
            [ -f tsconfig.json ] && npx tsc -p tsconfig.json || true
            cd -
          fi

      - name: Create deploy.zip
        run: |
          set -e
          cd artifacts
          zip -r ../deploy.zip . -x "**/.git/**" "**/.cache/**" "**/node_modules/.cache/**"
          cd -

      - name: Deploy to Azure WebApp (ingest)
        uses: azure/webapps-deploy@v3
        with:
          app-name: canadawill-ingest
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: deploy.zip
