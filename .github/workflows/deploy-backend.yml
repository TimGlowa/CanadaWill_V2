name: deploy-backend

on:
  push:
    branches: [ main ]

concurrency:
  group: deploy-backend
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.19.4'

      - name: Stage artifacts (force node server.js; locate express-ingest dynamically)
        run: |
          set -e
          rm -rf artifacts
          mkdir -p artifacts

          echo "PWD:"
          pwd
          echo "Repo tree (top 2 levels):"
          find . -maxdepth 2 -type d -print

          # 1) Flatten server.js to root (expected by Azure/Oryx -> node server.js)
          if [ -f backend/server.js ]; then
            cp backend/server.js artifacts/server.js
          elif [ -f server.js ]; then
            cp server.js artifacts/server.js
          else
            echo "ERROR: server.js not found in backend/ or repo root."; exit 1
          fi

          # 2) Create a root package.json with start script, remove any postinstall
          if [ -f backend/package.json ]; then
            jq '(.scripts//={}) | .scripts.start="node server.js" | del(.scripts.postinstall)' \
              backend/package.json > artifacts/package.json
            [ -f backend/package-lock.json ] && cp backend/package-lock.json artifacts/package-lock.json || true
          elif [ -f package.json ]; then
            jq '(.scripts//={}) | .scripts.start="node server.js" | del(.scripts.postinstall)' \
              package.json > artifacts/package.json
            [ -f package-lock.json ] && cp package-lock.json artifacts/package-lock.json || true
          else
            echo '{"name":"ingest","version":"1.0.0","scripts":{"start":"node server.js"},"dependencies":{"express":"^4.19.2"}}' > artifacts/package.json
          fi

          # 3) Find express-ingest anywhere in the repo
          EXPRESS_SRC="$(find . -type f -path '*/express-ingest/package.json' | head -n1 | xargs -r dirname || true)"
          echo "Detected express-ingest dir: ${EXPRESS_SRC:-<none>}"
          if [ -z "$EXPRESS_SRC" ] || [ ! -d "$EXPRESS_SRC" ]; then
            echo "ERROR: Could not locate express-ingest in this repo."; exit 1
          fi

          # 4) Copy express-ingest into artifacts
          mkdir -p artifacts/express-ingest
          cp -a "$EXPRESS_SRC"/. artifacts/express-ingest/

          echo "===== STAGED TREE (first 3 levels) ====="
          find artifacts -maxdepth 3 -print

      - name: Install root deps
        run: |
          set -e
          cd artifacts
          npm install --omit=dev --no-audit --no-fund

      - name: Install & build express-ingest deps
        run: |
          set -e
          if [ -f artifacts/express-ingest/package.json ]; then
            cd artifacts/express-ingest
            npm install --omit=dev --no-audit --no-fund
            [ -f tsconfig.json ] && npx tsc -p tsconfig.json || true
            cd -
          else
            echo "ERROR: artifacts/express-ingest/package.json not found after staging"; exit 1
          fi

      - name: Create deploy.zip
        run: |
          set -e
          cd artifacts
          zip -r ../deploy.zip . -x "**/.git/**" "**/.cache/**" "**/node_modules/.cache/**"
          cd -

      - name: Deploy to Azure WebApp (ingest)
        uses: azure/webapps-deploy@v3
        with:
          app-name: canadawill-ingest-ave2f8fjcxeuaehz
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: deploy.zip
