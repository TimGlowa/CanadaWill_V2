name: deploy-backend

on:
  push:
    branches: [ main ]

concurrency:
  group: deploy-backend
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.19.4'

      - name: Stage artifacts (force node server.js; choose correct express-ingest by content)
        run: |
          set -euo pipefail
          rm -rf artifacts
          mkdir -p artifacts

          # Root entrypoint expected by Azure/Oryx
          if [ -f backend/server.js ]; then
            cp backend/server.js artifacts/server.js
          elif [ -f server.js ]; then
            cp server.js artifacts/server.js
          else
            echo "ERROR: server.js not found in backend/ or repo root"; exit 1
          fi

          # Root package.json with start script; strip postinstall
          if [ -f backend/package.json ]; then
            jq '(.scripts//={}) | .scripts.start="node server.js" | del(.scripts.postinstall)' \
              backend/package.json > artifacts/package.json
            [ -f backend/package-lock.json ] && cp backend/package-lock.json artifacts/package-lock.json || true
          elif [ -f package.json ]; then
            jq '(.scripts//={}) | .scripts.start="node server.js" | del(.scripts.postinstall)' \
              package.json > artifacts/package.json
            [ -f package-lock.json ] && cp package-lock.json artifacts/package-lock.json || true
          else
            cat > artifacts/package.json <<'JSON'
{ "name":"ingest","version":"1.0.0",
  "scripts":{"start":"node server.js"},
  "dependencies":{"express":"^4.19.2"} }
JSON
          fi

          echo "Searching for express-ingest candidates..."
          mapfile -t CANDS < <(find . -type d -name express-ingest | sort)
          if [ ${#CANDS[@]} -eq 0 ]; then
            echo "ERROR: No express-ingest directories found"; exit 1
          fi

          # Score candidates: prefer one containing serp-tools.runtime.js, or src/providers, or dist/providers
          BEST=""
          BESTSCORE=-1
          for d in "${CANDS[@]}"; do
            s=0
            [ -f "$d/serp-tools.runtime.js" ] && s=$((s+100))
            [ -d "$d/src/providers" ]        && s=$((s+50))
            [ -d "$d/dist/providers" ]       && s=$((s+30))
            [ -f "$d/package.json" ]         && s=$((s+5))
            printf 'score=%3d  %s\n' "$s" "$d"
            if [ $s -gt $BESTSCORE ]; then BESTSCORE=$s; BEST="$d"; fi
          done

          if [ -z "$BEST" ] || [ $BESTSCORE -lt 10 ]; then
            echo "ERROR: Found express-ingest, but none contain required files (serp-tools.runtime.js/src/dist)"; exit 1
          fi

          echo "Chosen express-ingest: $BEST  (score=$BESTSCORE)"
          mkdir -p artifacts/express-ingest
          cp -a "$BEST"/. artifacts/express-ingest/

          echo "===== STAGED TREE (first 3 levels) ====="
          find artifacts -maxdepth 3 -print

      - name: Install root deps
        run: |
          set -e
          cd artifacts
          npm install --omit=dev --no-audit --no-fund

      - name: Install & build express-ingest deps
        run: |
          set -e
          if [ -f artifacts/express-ingest/package.json ]; then
            cd artifacts/express-ingest
            npm install --omit=dev --no-audit --no-fund
            [ -f tsconfig.json ] && npx tsc -p tsconfig.json || true
            cd -
          else
            echo "ERROR: artifacts/express-ingest/package.json missing after staging"; exit 1
          fi

      - name: Create deploy.zip
        run: |
          set -e
          cd artifacts
          zip -r ../deploy.zip . -x "**/.git/**" "**/.cache/**" "**/node_modules/.cache/**"
          cd -

      - name: Deploy to Azure WebApp (ingest)
        uses: azure/webapps-deploy@v3
        with:
          app-name: canadawill-ingest-ave2f8fjcxeuaehz
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: deploy.zip
