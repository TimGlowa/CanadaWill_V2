import { useState, useEffect } from 'react';
import {
  EnvelopeIcon,
  EnvelopeOpenIcon,
  ClockIcon,
  ExclamationTriangleIcon,
  CheckCircleIcon,
  XCircleIcon,
  ChartBarIcon,
  CalendarIcon,
  BellIcon,
  EyeIcon,
  PlusIcon,
  FunnelIcon,
  ArrowPathIcon,
} from '@heroicons/react/24/outline';
import { useAuth } from '../../contexts/AuthContext';

interface EmailThread {
  id: string;
  politicianId: string;
  politicianName: string;
  party: string;
  constituency: string;
  subject: string;
  initialSentDate: string;
  lastEmailDate: string;
  totalEmails: number;
  responseReceived: boolean;
  responseDate?: string;
  responseTime?: number; // hours
  status: 'sent' | 'responded' | 'no_response' | 'bounced' | 'follow_up_needed';
  priority: 'low' | 'medium' | 'high';
  category: 'verification' | 'follow_up' | 'initial_contact' | 'clarification';
  tags: string[];
  nextFollowUpDate?: string;
  reminderSet: boolean;
}

interface EmailMessage {
  id: string;
  threadId: string;
  direction: 'sent' | 'received';
  fromEmail: string;
  toEmail: string;
  subject: string;
  body: string;
  timestamp: string;
  attachments?: string[];
  isAutoGenerated: boolean;
}

interface EmailStats {
  totalSent: number;
  totalResponses: number;
  responseRate: number;
  averageResponseTime: number; // hours
  pendingResponses: number;
  needsFollowUp: number;
  bounced: number;
  byParty: Record<string, { sent: number; responded: number; rate: number }>;
  byConstituency: Record<string, { sent: number; responded: number; rate: number }>;
  responseTimeDistribution: { range: string; count: number }[];
}

interface FollowUpSchedule {
  id: string;
  threadId: string;
  politicianName: string;
  scheduledDate: string;
  reminderDate: string;
  message: string;
  status: 'pending' | 'sent' | 'cancelled';
  createdBy: string;
  createdAt: string;
}

export default function EmailTracking() {
  const { hasPermission } = useAuth();
  const [emailThreads, setEmailThreads] = useState<EmailThread[]>([]);
  const [emailMessages, setEmailMessages] = useState<EmailMessage[]>([]);
  const [emailStats, setEmailStats] = useState<EmailStats | null>(null);
  const [followUpSchedule, setFollowUpSchedule] = useState<FollowUpSchedule[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'overview' | 'threads' | 'analytics' | 'schedule'>('overview');
  
  // Filters
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [filterParty, setFilterParty] = useState<string>('all');
  const [filterCategory, setFilterCategory] = useState<string>('all');
  const [filterPriority, setFilterPriority] = useState<string>('all');
  const [dateRange, setDateRange] = useState<'7d' | '30d' | '90d' | 'all'>('30d');
  
  // Modal states
  const [viewingThread, setViewingThread] = useState<EmailThread | null>(null);
  const [showThreadModal, setShowThreadModal] = useState(false);
  const [showScheduleModal, setShowScheduleModal] = useState(false);
  const [newSchedule, setNewSchedule] = useState({
    threadId: '',
    scheduledDate: '',
    reminderDate: '',
    message: '',
  });

  const canWrite = hasPermission('quotes.write'); // Using quotes permission as proxy

  // Mock data
  useEffect(() => {
    const mockThreads: EmailThread[] = [
      {
        id: 't1',
        politicianId: 'p1',
        politicianName: 'John Smith',
        party: 'United Conservative Party',
        constituency: 'Calgary-Centre',
        subject: 'CanadaWill Verification Request - Alberta Separation Stance',
        initialSentDate: '2025-07-15T09:00:00Z',
        lastEmailDate: '2025-07-16T14:30:00Z',
        totalEmails: 2,
        responseReceived: true,
        responseDate: '2025-07-16T14:30:00Z',
        responseTime: 29.5,
        status: 'responded',
        priority: 'high',
        category: 'verification',
        tags: ['pro_canada', 'verified'],
        reminderSet: false,
      },
      {
        id: 't2',
        politicianId: 'p2',
        politicianName: 'Sarah Johnson',
        party: 'New Democratic Party',
        constituency: 'Edmonton-Glenora',
        subject: 'Follow-up: Alberta Separation Position',
        initialSentDate: '2025-07-10T11:00:00Z',
        lastEmailDate: '2025-07-18T10:00:00Z',
        totalEmails: 3,
        responseReceived: true,
        responseDate: '2025-07-19T16:20:00Z',
        responseTime: 221.3,
        status: 'responded',
        priority: 'medium',
        category: 'follow_up',
        tags: ['no_comment', 'reluctant'],
        nextFollowUpDate: '2025-08-19T10:00:00Z',
        reminderSet: true,
      },
      {
        id: 't3',
        politicianId: 'p3',
        politicianName: 'Michael Chen',
        party: 'Alberta Party',
        constituency: 'Calgary-Fish Creek',
        subject: 'CanadaWill Verification - Your Position on Alberta Independence',
        initialSentDate: '2025-07-12T14:00:00Z',
        lastEmailDate: '2025-07-12T14:00:00Z',
        totalEmails: 1,
        responseReceived: false,
        status: 'no_response',
        priority: 'medium',
        category: 'initial_contact',
        tags: ['candidate', 'pending'],
        nextFollowUpDate: '2025-07-22T14:00:00Z',
        reminderSet: true,
      },
      {
        id: 't4',
        politicianId: 'p4',
        politicianName: 'Robert Taylor',
        party: 'Wildrose Independence Party',
        constituency: 'Medicine Hat-Cardston-Warner',
        subject: 'Verification: Independence Party Platform',
        initialSentDate: '2025-07-17T16:00:00Z',
        lastEmailDate: '2025-07-17T17:15:00Z',
        totalEmails: 2,
        responseReceived: true,
        responseDate: '2025-07-17T17:15:00Z',
        responseTime: 1.25,
        status: 'responded',
        priority: 'high',
        category: 'verification',
        tags: ['pro_separation', 'verified'],
        reminderSet: false,
      },
      {
        id: 't5',
        politicianId: 'p5',
        politicianName: 'Lisa Anderson',
        party: 'Liberal',
        constituency: 'Calgary-Buffalo',
        subject: 'CanadaWill Survey - Alberta Separation Stance',
        initialSentDate: '2025-07-14T08:30:00Z',
        lastEmailDate: '2025-07-20T09:00:00Z',
        totalEmails: 2,
        responseReceived: false,
        status: 'follow_up_needed',
        priority: 'low',
        category: 'follow_up',
        tags: ['liberal', 'non_responsive'],
        nextFollowUpDate: '2025-07-25T09:00:00Z',
        reminderSet: true,
      },
    ];

    const mockMessages: EmailMessage[] = [
      {
        id: 'm1',
        threadId: 't1',
        direction: 'sent',
        fromEmail: 'verify@canadawill.com',
        toEmail: 'john.smith@assembly.ab.ca',
        subject: 'CanadaWill Verification Request - Alberta Separation Stance',
        body: 'Dear Mr. Smith,\n\nI hope this email finds you well. CanadaWill is conducting a comprehensive survey of Alberta politicians\' positions on Alberta separation from Canada...',
        timestamp: '2025-07-15T09:00:00Z',
        isAutoGenerated: false,
      },
      {
        id: 'm2',
        threadId: 't1',
        direction: 'received',
        fromEmail: 'john.smith@assembly.ab.ca',
        toEmail: 'verify@canadawill.com',
        subject: 'Re: CanadaWill Verification Request - Alberta Separation Stance',
        body: 'Thank you for your email. I am firmly committed to a strong, united Canada. Alberta\'s future is best served within Confederation...',
        timestamp: '2025-07-16T14:30:00Z',
        isAutoGenerated: false,
      },
    ];

    const mockStats: EmailStats = {
      totalSent: 247,
      totalResponses: 156,
      responseRate: 63.2,
      averageResponseTime: 18.5,
      pendingResponses: 91,
      needsFollowUp: 23,
      bounced: 4,
      byParty: {
        'United Conservative Party': { sent: 87, responded: 58, rate: 66.7 },
        'New Democratic Party': { sent: 24, responded: 12, rate: 50.0 },
        'Alberta Party': { sent: 15, responded: 8, rate: 53.3 },
        'Liberal': { sent: 8, responded: 3, rate: 37.5 },
        'Wildrose Independence Party': { sent: 6, responded: 5, rate: 83.3 },
        'Independent': { sent: 22, responded: 14, rate: 63.6 },
      },
      byConstituency: {
        'Calgary-Centre': { sent: 3, responded: 2, rate: 66.7 },
        'Edmonton-Glenora': { sent: 3, responded: 1, rate: 33.3 },
        'Calgary-Fish Creek': { sent: 2, responded: 0, rate: 0.0 },
      },
      responseTimeDistribution: [
        { range: '< 1 hour', count: 12 },
        { range: '1-6 hours', count: 34 },
        { range: '6-24 hours', count: 56 },
        { range: '1-3 days', count: 43 },
        { range: '3-7 days', count: 28 },
        { range: '> 1 week', count: 23 },
      ],
    };

    const mockSchedule: FollowUpSchedule[] = [
      {
        id: 's1',
        threadId: 't3',
        politicianName: 'Michael Chen',
        scheduledDate: '2025-07-22T14:00:00Z',
        reminderDate: '2025-07-21T14:00:00Z',
        message: 'Second follow-up for initial verification request',
        status: 'pending',
        createdBy: 'admin@canadawill.com',
        createdAt: '2025-07-12T14:30:00Z',
      },
      {
        id: 's2',
        threadId: 't5',
        politicianName: 'Lisa Anderson',
        scheduledDate: '2025-07-25T09:00:00Z',
        reminderDate: '2025-07-24T09:00:00Z',
        message: 'Final follow-up attempt for Liberal party stance',
        status: 'pending',
        createdBy: 'admin@canadawill.com',
        createdAt: '2025-07-20T09:30:00Z',
      },
    ];

    setTimeout(() => {
      setEmailThreads(mockThreads);
      setEmailMessages(mockMessages);
      setEmailStats(mockStats);
      setFollowUpSchedule(mockSchedule);
      setLoading(false);
    }, 1000);
  }, []);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'responded': return 'bg-green-100 text-green-800';
      case 'no_response': return 'bg-yellow-100 text-yellow-800';
      case 'follow_up_needed': return 'bg-orange-100 text-orange-800';
      case 'bounced': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'text-red-600';
      case 'medium': return 'text-yellow-600';
      default: return 'text-gray-600';
    }
  };

  const filteredThreads = emailThreads.filter(thread => {
    const matchesSearch = thread.politicianName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         thread.constituency.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         thread.subject.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = filterStatus === 'all' || thread.status === filterStatus;
    const matchesParty = filterParty === 'all' || thread.party === filterParty;
    const matchesCategory = filterCategory === 'all' || thread.category === filterCategory;
    const matchesPriority = filterPriority === 'all' || thread.priority === filterPriority;
    
    return matchesSearch && matchesStatus && matchesParty && matchesCategory && matchesPriority;
  });

  const handleScheduleFollowUp = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const schedule: FollowUpSchedule = {
      id: `s_${Date.now()}`,
      threadId: newSchedule.threadId,
      politicianName: emailThreads.find(t => t.id === newSchedule.threadId)?.politicianName || '',
      scheduledDate: newSchedule.scheduledDate,
      reminderDate: newSchedule.reminderDate,
      message: newSchedule.message,
      status: 'pending',
      createdBy: 'admin@canadawill.com',
      createdAt: new Date().toISOString(),
    };

    setFollowUpSchedule([...followUpSchedule, schedule]);
    setNewSchedule({ threadId: '', scheduledDate: '', reminderDate: '', message: '' });
    setShowScheduleModal(false);
  };

  const openThreadModal = (thread: EmailThread) => {
    setViewingThread(thread);
    setShowThreadModal(true);
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
      </div>
    );
  }

  return (
    <div className="px-4 sm:px-6 lg:px-8">
      {/* Header */}
      <div className="sm:flex sm:items-center">
        <div className="sm:flex-auto">
          <h1 className="text-2xl font-bold leading-6 text-gray-900">Email Response Tracking</h1>
          <p className="mt-2 text-sm text-gray-700">
            Monitor email communications, response rates, and follow-up schedules
          </p>
        </div>
        <div className="mt-4 sm:ml-16 sm:mt-0 sm:flex-none">
          {canWrite && (
            <button
              onClick={() => setShowScheduleModal(true)}
              className="inline-flex items-center justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
            >
              <PlusIcon className="-ml-0.5 mr-1.5 h-5 w-5" />
              Schedule Follow-up
            </button>
          )}
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="mt-8">
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8">
            {[
              { id: 'overview', name: 'Overview', icon: ChartBarIcon },
              { id: 'threads', name: 'Email Threads', icon: EnvelopeIcon },
              { id: 'analytics', name: 'Analytics', icon: ChartBarIcon },
              { id: 'schedule', name: 'Follow-up Schedule', icon: CalendarIcon },
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id as any)}
                className={`${
                  activeTab === tab.id
                    ? 'border-indigo-500 text-indigo-600'
                    : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                } flex items-center whitespace-nowrap border-b-2 px-1 py-4 text-sm font-medium`}
              >
                <tab.icon className="h-5 w-5 mr-2" />
                {tab.name}
              </button>
            ))}
          </nav>
        </div>
      </div>

      {/* Overview Tab */}
      {activeTab === 'overview' && emailStats && (
        <div className="mt-8 space-y-6">
          {/* Key Stats */}
          <div className="grid grid-cols-1 gap-5 sm:grid-cols-4">
            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <EnvelopeIcon className="h-6 w-6 text-gray-400" />
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">Total Sent</dt>
                      <dd className="text-lg font-medium text-gray-900">{emailStats.totalSent}</dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <EnvelopeOpenIcon className="h-6 w-6 text-green-400" />
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">Responses</dt>
                      <dd className="text-lg font-medium text-gray-900">{emailStats.totalResponses}</dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <CheckCircleIcon className="h-6 w-6 text-indigo-400" />
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">Response Rate</dt>
                      <dd className="text-lg font-medium text-gray-900">{emailStats.responseRate}%</dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <ClockIcon className="h-6 w-6 text-yellow-400" />
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">Avg Response Time</dt>
                      <dd className="text-lg font-medium text-gray-900">{emailStats.averageResponseTime}h</dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Status Overview */}
          <div className="grid grid-cols-1 gap-5 sm:grid-cols-4">
            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <ExclamationTriangleIcon className="h-6 w-6 text-yellow-400" />
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">Pending</dt>
                      <dd className="text-lg font-medium text-gray-900">{emailStats.pendingResponses}</dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <BellIcon className="h-6 w-6 text-orange-400" />
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">Follow-up Needed</dt>
                      <dd className="text-lg font-medium text-gray-900">{emailStats.needsFollowUp}</dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <XCircleIcon className="h-6 w-6 text-red-400" />
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">Bounced</dt>
                      <dd className="text-lg font-medium text-gray-900">{emailStats.bounced}</dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="p-5">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <CalendarIcon className="h-6 w-6 text-purple-400" />
                  </div>
                  <div className="ml-5 w-0 flex-1">
                    <dl>
                      <dt className="text-sm font-medium text-gray-500 truncate">Scheduled</dt>
                      <dd className="text-lg font-medium text-gray-900">
                        {followUpSchedule.filter(s => s.status === 'pending').length}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Party Response Rates */}
          <div className="bg-white shadow rounded-lg">
            <div className="px-4 py-5 sm:p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Response Rates by Party</h3>
              <div className="space-y-4">
                {Object.entries(emailStats.byParty).map(([party, stats]) => (
                  <div key={party} className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <span className="text-sm font-medium text-gray-900">{party}</span>
                      <span className="text-sm text-gray-500">
                        ({stats.responded}/{stats.sent} emails)
                      </span>
                    </div>
                    <div className="flex items-center space-x-3">
                      <div className="w-32 bg-gray-200 rounded-full h-2">
                        <div
                          className="bg-indigo-600 h-2 rounded-full"
                          style={{ width: `${stats.rate}%` }}
                        ></div>
                      </div>
                      <span className="text-sm font-medium text-gray-900 w-12 text-right">
                        {stats.rate.toFixed(1)}%
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Email Threads Tab */}
      {activeTab === 'threads' && (
        <div className="mt-8 space-y-6">
          {/* Filters */}
          <div className="bg-white shadow rounded-lg p-6">
            <div className="grid grid-cols-1 gap-4 sm:grid-cols-6">
              <div className="sm:col-span-2">
                <div className="relative">
                  <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                    <FunnelIcon className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    type="text"
                    placeholder="Search politicians, constituencies..."
                    className="block w-full rounded-md border-gray-300 pl-10 focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </div>
              </div>
              
              <select
                className="rounded-md border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
              >
                <option value="all">All Status</option>
                <option value="sent">Sent</option>
                <option value="responded">Responded</option>
                <option value="no_response">No Response</option>
                <option value="follow_up_needed">Follow-up Needed</option>
                <option value="bounced">Bounced</option>
              </select>

              <select
                className="rounded-md border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                value={filterCategory}
                onChange={(e) => setFilterCategory(e.target.value)}
              >
                <option value="all">All Categories</option>
                <option value="verification">Verification</option>
                <option value="follow_up">Follow-up</option>
                <option value="initial_contact">Initial Contact</option>
                <option value="clarification">Clarification</option>
              </select>

              <select
                className="rounded-md border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                value={filterPriority}
                onChange={(e) => setFilterPriority(e.target.value)}
              >
                <option value="all">All Priority</option>
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
              </select>

              <select
                className="rounded-md border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                value={dateRange}
                onChange={(e) => setDateRange(e.target.value as any)}
              >
                <option value="7d">Last 7 Days</option>
                <option value="30d">Last 30 Days</option>
                <option value="90d">Last 90 Days</option>
                <option value="all">All Time</option>
              </select>
            </div>
          </div>

          {/* Threads Table */}
          <div className="bg-white shadow overflow-hidden sm:rounded-md">
            <ul className="divide-y divide-gray-200">
              {filteredThreads.map((thread) => (
                <li key={thread.id} className="px-6 py-4">
                  <div className="flex items-center space-x-4">
                    <div className="min-w-0 flex-1">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <p className="text-sm font-medium text-gray-900 truncate">
                            {thread.politicianName}
                          </p>
                          <span className="text-sm text-gray-500">({thread.party})</span>
                          <span className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${getPriorityColor(thread.priority)}`}>
                            {thread.priority}
                          </span>
                          {thread.reminderSet && (
                            <BellIcon className="h-4 w-4 text-orange-400" title="Reminder Set" />
                          )}
                        </div>
                        <div className="flex items-center space-x-4">
                          <span className={`inline-flex rounded-full px-2 py-1 text-xs font-semibold ${getStatusColor(thread.status)}`}>
                            {thread.status.replace('_', ' ')}
                          </span>
                          <button
                            onClick={() => openThreadModal(thread)}
                            className="text-indigo-600 hover:text-indigo-900"
                            title="View Thread"
                          >
                            <EyeIcon className="h-4 w-4" />
                          </button>
                        </div>
                      </div>
                      
                      <p className="mt-1 text-sm text-gray-600 truncate">
                        {thread.subject}
                      </p>
                      
                      <div className="mt-2 flex items-center text-xs text-gray-500 space-x-4">
                        <span>{thread.constituency}</span>
                        <span>•</span>
                        <span>{thread.totalEmails} emails</span>
                        <span>•</span>
                        <span>{new Date(thread.initialSentDate).toLocaleDateString()}</span>
                        {thread.responseTime && (
                          <>
                            <span>•</span>
                            <span>Response: {thread.responseTime.toFixed(1)}h</span>
                          </>
                        )}
                        {thread.nextFollowUpDate && (
                          <>
                            <span>•</span>
                            <span>Next follow-up: {new Date(thread.nextFollowUpDate).toLocaleDateString()}</span>
                          </>
                        )}
                      </div>

                      {thread.tags.length > 0 && (
                        <div className="mt-2 flex flex-wrap gap-1">
                          {thread.tags.map(tag => (
                            <span
                              key={tag}
                              className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800"
                            >
                              {tag}
                            </span>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                </li>
              ))}
            </ul>
            
            {filteredThreads.length === 0 && (
              <div className="px-6 py-12 text-center">
                <EnvelopeIcon className="mx-auto h-12 w-12 text-gray-400" />
                <h3 className="mt-2 text-sm font-medium text-gray-900">No email threads found</h3>
                <p className="mt-1 text-sm text-gray-500">
                  No threads match your current filter criteria.
                </p>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Analytics Tab */}
      {activeTab === 'analytics' && emailStats && (
        <div className="mt-8 space-y-6">
          <div className="bg-white shadow rounded-lg">
            <div className="px-4 py-5 sm:p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Response Time Distribution</h3>
              <div className="space-y-3">
                {emailStats.responseTimeDistribution.map((item) => (
                  <div key={item.range} className="flex items-center justify-between">
                    <span className="text-sm font-medium text-gray-900">{item.range}</span>
                    <div className="flex items-center space-x-3">
                      <div className="w-40 bg-gray-200 rounded-full h-2">
                        <div
                          className="bg-indigo-600 h-2 rounded-full"
                          style={{ width: `${(item.count / emailStats.totalResponses) * 100}%` }}
                        ></div>
                      </div>
                      <span className="text-sm text-gray-600 w-8">{item.count}</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Schedule Tab */}
      {activeTab === 'schedule' && (
        <div className="mt-8 space-y-6">
          <div className="bg-white shadow overflow-hidden sm:rounded-md">
            <div className="px-4 py-5 sm:px-6 border-b border-gray-200">
              <h3 className="text-lg font-medium text-gray-900">Upcoming Follow-ups</h3>
            </div>
            <ul className="divide-y divide-gray-200">
              {followUpSchedule
                .filter(schedule => schedule.status === 'pending')
                .sort((a, b) => new Date(a.scheduledDate).getTime() - new Date(b.scheduledDate).getTime())
                .map((schedule) => (
                  <li key={schedule.id} className="px-6 py-4">
                    <div className="flex items-center justify-between">
                      <div className="min-w-0 flex-1">
                        <p className="text-sm font-medium text-gray-900">
                          {schedule.politicianName}
                        </p>
                        <p className="mt-1 text-sm text-gray-600">
                          {schedule.message}
                        </p>
                        <div className="mt-2 flex items-center text-xs text-gray-500 space-x-4">
                          <span>Scheduled: {new Date(schedule.scheduledDate).toLocaleString()}</span>
                          <span>•</span>
                          <span>Reminder: {new Date(schedule.reminderDate).toLocaleString()}</span>
                          <span>•</span>
                          <span>Created by: {schedule.createdBy}</span>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <span className="inline-flex rounded-full bg-yellow-100 px-2 py-1 text-xs font-semibold text-yellow-800">
                          {schedule.status}
                        </span>
                      </div>
                    </div>
                  </li>
                ))}
            </ul>
            
            {followUpSchedule.filter(s => s.status === 'pending').length === 0 && (
              <div className="px-6 py-12 text-center">
                <CalendarIcon className="mx-auto h-12 w-12 text-gray-400" />
                <h3 className="mt-2 text-sm font-medium text-gray-900">No scheduled follow-ups</h3>
                <p className="mt-1 text-sm text-gray-500">
                  Schedule follow-up emails to stay organized.
                </p>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Thread Detail Modal */}
      {showThreadModal && viewingThread && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-10 mx-auto p-5 border w-[800px] shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-gray-900">Email Thread Details</h3>
                <button
                  onClick={() => setShowThreadModal(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  ×
                </button>
              </div>
              
              <div className="space-y-4">
                <div className="bg-gray-50 p-4 rounded-lg">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <p className="text-sm font-medium text-gray-700">Politician</p>
                      <p className="text-sm text-gray-900">{viewingThread.politicianName}</p>
                      <p className="text-xs text-gray-500">{viewingThread.party} - {viewingThread.constituency}</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-700">Status</p>
                      <span className={`inline-flex rounded-full px-2 py-1 text-xs font-semibold ${getStatusColor(viewingThread.status)}`}>
                        {viewingThread.status.replace('_', ' ')}
                      </span>
                    </div>
                  </div>
                </div>

                <div className="space-y-3">
                  <h4 className="text-sm font-medium text-gray-900">Email Messages</h4>
                  {emailMessages
                    .filter(msg => msg.threadId === viewingThread.id)
                    .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime())
                    .map((message) => (
                      <div key={message.id} className={`p-4 rounded-lg ${
                        message.direction === 'sent' ? 'bg-blue-50 ml-8' : 'bg-green-50 mr-8'
                      }`}>
                        <div className="flex items-center justify-between mb-2">
                          <div className="flex items-center space-x-2">
                            <span className="text-sm font-medium">
                              {message.direction === 'sent' ? 'Sent' : 'Received'}
                            </span>
                            <span className="text-xs text-gray-500">
                              {new Date(message.timestamp).toLocaleString()}
                            </span>
                          </div>
                        </div>
                        <p className="text-sm text-gray-600 mb-2">{message.subject}</p>
                        <div className="text-sm text-gray-900 whitespace-pre-wrap">
                          {message.body.substring(0, 300)}
                          {message.body.length > 300 && '...'}
                        </div>
                      </div>
                    ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Schedule Modal */}
      {showScheduleModal && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-[500px] shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-gray-900">Schedule Follow-up</h3>
                <button
                  onClick={() => setShowScheduleModal(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  ×
                </button>
              </div>
              
              <form onSubmit={handleScheduleFollowUp} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Email Thread</label>
                  <select
                    required
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                    value={newSchedule.threadId}
                    onChange={(e) => setNewSchedule({ ...newSchedule, threadId: e.target.value })}
                  >
                    <option value="">Select a thread...</option>
                    {emailThreads
                      .filter(thread => thread.status === 'no_response' || thread.status === 'follow_up_needed')
                      .map(thread => (
                        <option key={thread.id} value={thread.id}>
                          {thread.politicianName} - {thread.subject}
                        </option>
                      ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700">Scheduled Date</label>
                  <input
                    type="datetime-local"
                    required
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                    value={newSchedule.scheduledDate}
                    onChange={(e) => setNewSchedule({ ...newSchedule, scheduledDate: e.target.value })}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700">Reminder Date</label>
                  <input
                    type="datetime-local"
                    required
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                    value={newSchedule.reminderDate}
                    onChange={(e) => setNewSchedule({ ...newSchedule, reminderDate: e.target.value })}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700">Message</label>
                  <textarea
                    rows={3}
                    required
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                    value={newSchedule.message}
                    onChange={(e) => setNewSchedule({ ...newSchedule, message: e.target.value })}
                  />
                </div>

                <div className="flex justify-end space-x-3 pt-4">
                  <button
                    type="button"
                    onClick={() => {
                      setShowScheduleModal(false);
                      setNewSchedule({ threadId: '', scheduledDate: '', reminderDate: '', message: '' });
                    }}
                    className="rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="rounded-md bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-500"
                  >
                    Schedule
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
} 